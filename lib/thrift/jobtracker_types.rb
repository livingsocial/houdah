#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'common_types'


module Hadoop
  module API
    module Jobtracker
            module ThriftTaskType
              MAP = 0
              REDUCE = 1
              JOB_SETUP = 2
              JOB_CLEANUP = 3
              TASK_CLEANUP = 4
              VALUE_MAP = {0 => "MAP", 1 => "REDUCE", 2 => "JOB_SETUP", 3 => "JOB_CLEANUP", 4 => "TASK_CLEANUP"}
              VALID_VALUES = Set.new([MAP, REDUCE, JOB_SETUP, JOB_CLEANUP, TASK_CLEANUP]).freeze
            end

            module ThriftTaskState
              RUNNING = 0
              SUCCEEDED = 1
              FAILED = 2
              UNASSIGNED = 3
              KILLED = 4
              COMMIT_PENDING = 5
              FAILED_UNCLEAN = 6
              KILLED_UNCLEAN = 7
              VALUE_MAP = {0 => "RUNNING", 1 => "SUCCEEDED", 2 => "FAILED", 3 => "UNASSIGNED", 4 => "KILLED", 5 => "COMMIT_PENDING", 6 => "FAILED_UNCLEAN", 7 => "KILLED_UNCLEAN"}
              VALID_VALUES = Set.new([RUNNING, SUCCEEDED, FAILED, UNASSIGNED, KILLED, COMMIT_PENDING, FAILED_UNCLEAN, KILLED_UNCLEAN]).freeze
            end

            module ThriftTaskPhase
              STARTING = 0
              MAP = 1
              SHUFFLE = 2
              SORT = 3
              REDUCE = 4
              CLEANUP = 5
              VALUE_MAP = {0 => "STARTING", 1 => "MAP", 2 => "SHUFFLE", 3 => "SORT", 4 => "REDUCE", 5 => "CLEANUP"}
              VALID_VALUES = Set.new([STARTING, MAP, SHUFFLE, SORT, REDUCE, CLEANUP]).freeze
            end

            module ThriftTaskQueryState
              SUCCEEDED = 0
              FAILED = 1
              RUNNING = 2
              PENDING = 3
              KILLED = 4
              VALUE_MAP = {0 => "SUCCEEDED", 1 => "FAILED", 2 => "RUNNING", 3 => "PENDING", 4 => "KILLED"}
              VALID_VALUES = Set.new([SUCCEEDED, FAILED, RUNNING, PENDING, KILLED]).freeze
            end

            module ThriftJobPriority
              VERY_HIGH = 0
              HIGH = 1
              NORMAL = 2
              LOW = 3
              VERY_LOW = 4
              VALUE_MAP = {0 => "VERY_HIGH", 1 => "HIGH", 2 => "NORMAL", 3 => "LOW", 4 => "VERY_LOW"}
              VALID_VALUES = Set.new([VERY_HIGH, HIGH, NORMAL, LOW, VERY_LOW]).freeze
            end

            module JobTrackerState
              INITIALIZING = 0
              RUNNING = 1
              VALUE_MAP = {0 => "INITIALIZING", 1 => "RUNNING"}
              VALID_VALUES = Set.new([INITIALIZING, RUNNING]).freeze
            end

            module ThriftJobState
              RUNNING = 1
              SUCCEEDED = 2
              FAILED = 3
              PREP = 4
              KILLED = 5
              VALUE_MAP = {1 => "RUNNING", 2 => "SUCCEEDED", 3 => "FAILED", 4 => "PREP", 5 => "KILLED"}
              VALID_VALUES = Set.new([RUNNING, SUCCEEDED, FAILED, PREP, KILLED]).freeze
            end

            # Unique identifier for each job
            class ThriftJobID
              include ::Thrift::Struct, ::Thrift::Struct_Union
              JOBTRACKERID = 1
              JOBID = 2
              ASSTRING = 3

              FIELDS = {
                # Unique id of jobtracker
                JOBTRACKERID => {:type => ::Thrift::Types::STRING, :name => 'jobTrackerID'},
                # Unique (to JT) job id
                JOBID => {:type => ::Thrift::Types::I32, :name => 'jobID'},
                # Flattened as a string
                ASSTRING => {:type => ::Thrift::Types::STRING, :name => 'asString'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Description of a job queue
            class ThriftJobQueueInfo
              include ::Thrift::Struct, ::Thrift::Struct_Union
              QUEUENAME = 1
              SCHEDULINGINFO = 2

              FIELDS = {
                QUEUENAME => {:type => ::Thrift::Types::STRING, :name => 'queueName'},
                SCHEDULINGINFO => {:type => ::Thrift::Types::STRING, :name => 'schedulingInfo'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            class ThriftJobQueueList
              include ::Thrift::Struct, ::Thrift::Struct_Union
              QUEUES = 1

              FIELDS = {
                QUEUES => {:type => ::Thrift::Types::LIST, :name => 'queues', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftJobQueueInfo}}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Counter which represents some custom job metric
            class ThriftCounter
              include ::Thrift::Struct, ::Thrift::Struct_Union
              NAME = 1
              DISPLAYNAME = 2
              VALUE = 3

              FIELDS = {
                NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
                VALUE => {:type => ::Thrift::Types::I64, :name => 'value'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Counters are organized by group
            class ThriftCounterGroup
              include ::Thrift::Struct, ::Thrift::Struct_Union
              NAME = 1
              DISPLAYNAME = 2
              COUNTERS = 3

              FIELDS = {
                NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
                COUNTERS => {:type => ::Thrift::Types::MAP, :name => 'counters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftCounter}}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Container structure for counter groups
            class ThriftGroupList
              include ::Thrift::Struct, ::Thrift::Struct_Union
              GROUPS = 1

              FIELDS = {
                GROUPS => {:type => ::Thrift::Types::LIST, :name => 'groups', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftCounterGroup}}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Counters for map tasks only, reduce tasks only, and job-scoped counters
            class ThriftJobCounterRollups
              include ::Thrift::Struct, ::Thrift::Struct_Union
              MAPCOUNTERS = 1
              REDUCECOUNTERS = 2
              JOBCOUNTERS = 3

              FIELDS = {
                MAPCOUNTERS => {:type => ::Thrift::Types::STRUCT, :name => 'mapCounters', :class => Hadoop::API::Jobtracker::ThriftGroupList},
                REDUCECOUNTERS => {:type => ::Thrift::Types::STRUCT, :name => 'reduceCounters', :class => Hadoop::API::Jobtracker::ThriftGroupList},
                JOBCOUNTERS => {:type => ::Thrift::Types::STRUCT, :name => 'jobCounters', :class => Hadoop::API::Jobtracker::ThriftGroupList}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Unique task id
            class ThriftTaskID
              include ::Thrift::Struct, ::Thrift::Struct_Union
              JOBID = 1
              TASKTYPE = 2
              TASKID = 3
              ASSTRING = 4

              FIELDS = {
                # ID of the job to which the task belongs
                JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID},
                # What kind of task is this?
                TASKTYPE => {:type => ::Thrift::Types::I32, :name => 'taskType', :enum_class => Hadoop::API::Jobtracker::ThriftTaskType},
                # Unique (to job) task id
                TASKID => {:type => ::Thrift::Types::I32, :name => 'taskID'},
                # Flattened to a unique string
                ASSTRING => {:type => ::Thrift::Types::STRING, :name => 'asString'}
              }

              def struct_fields; FIELDS; end

              def validate
                unless @taskType.nil? || Hadoop::API::Jobtracker::ThriftTaskType::VALID_VALUES.include?(@taskType)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field taskType!')
                end
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Unique task attempt id
            class ThriftTaskAttemptID
              include ::Thrift::Struct, ::Thrift::Struct_Union
              TASKID = 1
              ATTEMPTID = 2
              ASSTRING = 3

              FIELDS = {
                TASKID => {:type => ::Thrift::Types::STRUCT, :name => 'taskID', :class => Hadoop::API::Jobtracker::ThriftTaskID},
                ATTEMPTID => {:type => ::Thrift::Types::I32, :name => 'attemptID'},
                ASSTRING => {:type => ::Thrift::Types::STRING, :name => 'asString'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Describes the current state of a single attempt
            class ThriftTaskStatus
              include ::Thrift::Struct, ::Thrift::Struct_Union
              TASKID = 1
              PROGRESS = 2
              STATE = 3
              DIAGNOSTICINFO = 4
              STATESTRING = 5
              TASKTRACKER = 6
              STARTTIME = 7
              FINISHTIME = 8
              OUTPUTSIZE = 9
              PHASE = 10
              COUNTERS = 11
              SHUFFLEFINISHTIME = 12
              SORTFINISHTIME = 13
              MAPFINISHTIME = 14

              FIELDS = {
                TASKID => {:type => ::Thrift::Types::STRUCT, :name => 'taskID', :class => Hadoop::API::Jobtracker::ThriftTaskAttemptID},
                PROGRESS => {:type => ::Thrift::Types::DOUBLE, :name => 'progress'},
                STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => Hadoop::API::Jobtracker::ThriftTaskState},
                DIAGNOSTICINFO => {:type => ::Thrift::Types::STRING, :name => 'diagnosticInfo'},
                STATESTRING => {:type => ::Thrift::Types::STRING, :name => 'stateString'},
                TASKTRACKER => {:type => ::Thrift::Types::STRING, :name => 'taskTracker'},
                STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
                FINISHTIME => {:type => ::Thrift::Types::I64, :name => 'finishTime'},
                OUTPUTSIZE => {:type => ::Thrift::Types::I64, :name => 'outputSize'},
                PHASE => {:type => ::Thrift::Types::I32, :name => 'phase', :enum_class => Hadoop::API::Jobtracker::ThriftTaskPhase},
                COUNTERS => {:type => ::Thrift::Types::STRUCT, :name => 'counters', :class => Hadoop::API::Jobtracker::ThriftGroupList},
                SHUFFLEFINISHTIME => {:type => ::Thrift::Types::I64, :name => 'shuffleFinishTime'},
                SORTFINISHTIME => {:type => ::Thrift::Types::I64, :name => 'sortFinishTime'},
                MAPFINISHTIME => {:type => ::Thrift::Types::I64, :name => 'mapFinishTime'}
              }

              def struct_fields; FIELDS; end

              def validate
                unless @state.nil? || Hadoop::API::Jobtracker::ThriftTaskState::VALID_VALUES.include?(@state)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
                end
                unless @phase.nil? || Hadoop::API::Jobtracker::ThriftTaskPhase::VALID_VALUES.include?(@phase)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field phase!')
                end
              end

              ::Thrift::Struct.generate_accessors self
            end

            # A ThriftTaskInProgress contains a list of
            # task attempts (speculatively executed instances of the same task).
            # These are indexed by TaskAttemptID.
            # For simplicity, we convert maps keyed on TaskAttemptIDs to maps keyed
            # on their string representation.
            # 
            # Assumption: there won't be so many task attempts that retrieving a single task
            # will be too expensive.
            class ThriftTaskInProgress
              include ::Thrift::Struct, ::Thrift::Struct_Union
              EXECSTARTTIME = 2
              EXECFINISHTIME = 3
              PROGRESS = 4
              STARTTIME = 5
              FAILED = 6
              COMPLETE = 7
              TASKID = 8
              TASKS = 9
              TASKSTATUSES = 10
              TASKDIAGNOSTICDATA = 11
              COUNTERS = 12
              MOSTRECENTSTATE = 13
              RUNNINGATTEMPTS = 14
              SUCCESSFULATTEMPT = 15

              FIELDS = {
                EXECSTARTTIME => {:type => ::Thrift::Types::I64, :name => 'execStartTime'},
                EXECFINISHTIME => {:type => ::Thrift::Types::I64, :name => 'execFinishTime'},
                PROGRESS => {:type => ::Thrift::Types::DOUBLE, :name => 'progress'},
                STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
                FAILED => {:type => ::Thrift::Types::BOOL, :name => 'failed'},
                COMPLETE => {:type => ::Thrift::Types::BOOL, :name => 'complete'},
                TASKID => {:type => ::Thrift::Types::STRUCT, :name => 'taskID', :class => Hadoop::API::Jobtracker::ThriftTaskID},
                TASKS => {:type => ::Thrift::Types::LIST, :name => 'tasks', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftTaskAttemptID}},
                # TaskAttemptID (string) to ThriftTaskStatus map
                TASKSTATUSES => {:type => ::Thrift::Types::MAP, :name => 'taskStatuses', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftTaskStatus}},
                TASKDIAGNOSTICDATA => {:type => ::Thrift::Types::MAP, :name => 'taskDiagnosticData', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
                COUNTERS => {:type => ::Thrift::Types::STRUCT, :name => 'counters', :class => Hadoop::API::Jobtracker::ThriftGroupList},
                MOSTRECENTSTATE => {:type => ::Thrift::Types::STRING, :name => 'mostRecentState'},
                RUNNINGATTEMPTS => {:type => ::Thrift::Types::LIST, :name => 'runningAttempts', :element => {:type => ::Thrift::Types::STRING}},
                SUCCESSFULATTEMPT => {:type => ::Thrift::Types::STRING, :name => 'successfulAttempt'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # TaskTracker status; contains details of individual tasks
            class ThriftTaskTrackerStatus
              include ::Thrift::Struct, ::Thrift::Struct_Union
              TRACKERNAME = 1
              HOST = 2
              HTTPPORT = 3
              FAILURECOUNT = 4
              TASKREPORTS = 5
              LASTSEEN = 6
              MAXMAPTASKS = 7
              MAXREDUCETASKS = 8
              TOTALVIRTUALMEMORY = 9
              TOTALPHYSICALMEMORY = 11
              AVAILABLESPACE = 13
              MAPCOUNT = 14
              REDUCECOUNT = 15

              FIELDS = {
                TRACKERNAME => {:type => ::Thrift::Types::STRING, :name => 'trackerName'},
                HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
                HTTPPORT => {:type => ::Thrift::Types::I32, :name => 'httpPort'},
                FAILURECOUNT => {:type => ::Thrift::Types::I32, :name => 'failureCount'},
                # List of the state of all tasks on this tracker
                TASKREPORTS => {:type => ::Thrift::Types::LIST, :name => 'taskReports', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftTaskStatus}},
                # When did the JobTracker last hear from this TaskTracker?
                LASTSEEN => {:type => ::Thrift::Types::I64, :name => 'lastSeen'},
                # Maximum possible number of both task types
                MAXMAPTASKS => {:type => ::Thrift::Types::I32, :name => 'maxMapTasks'},
                MAXREDUCETASKS => {:type => ::Thrift::Types::I32, :name => 'maxReduceTasks'},
                # Main memory metrics, all in bytes
                TOTALVIRTUALMEMORY => {:type => ::Thrift::Types::I64, :name => 'totalVirtualMemory'},
                TOTALPHYSICALMEMORY => {:type => ::Thrift::Types::I64, :name => 'totalPhysicalMemory'},
                AVAILABLESPACE => {:type => ::Thrift::Types::I64, :name => 'availableSpace'},
                # Currently running and unassigned map and reduce tasks
                MAPCOUNT => {:type => ::Thrift::Types::I32, :name => 'mapCount'},
                REDUCECOUNT => {:type => ::Thrift::Types::I32, :name => 'reduceCount'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Container structure for TaskTrackerStatus objects
            class ThriftTaskTrackerStatusList
              include ::Thrift::Struct, ::Thrift::Struct_Union
              TRACKERS = 1

              FIELDS = {
                TRACKERS => {:type => ::Thrift::Types::LIST, :name => 'trackers', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftTaskTrackerStatus}}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Status of a job
            class ThriftJobStatus
              include ::Thrift::Struct, ::Thrift::Struct_Union
              JOBID = 1
              MAPPROGRESS = 2
              REDUCEPROGRESS = 3
              CLEANUPPROGRESS = 4
              SETUPPROGRESS = 5
              RUNSTATE = 6
              STARTTIME = 7
              USER = 8
              PRIORITY = 9
              SCHEDULINGINFO = 10

              FIELDS = {
                JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID},
                MAPPROGRESS => {:type => ::Thrift::Types::DOUBLE, :name => 'mapProgress'},
                REDUCEPROGRESS => {:type => ::Thrift::Types::DOUBLE, :name => 'reduceProgress'},
                CLEANUPPROGRESS => {:type => ::Thrift::Types::DOUBLE, :name => 'cleanupProgress'},
                SETUPPROGRESS => {:type => ::Thrift::Types::DOUBLE, :name => 'setupProgress'},
                RUNSTATE => {:type => ::Thrift::Types::I32, :name => 'runState', :enum_class => Hadoop::API::Jobtracker::ThriftJobState},
                STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
                USER => {:type => ::Thrift::Types::STRING, :name => 'user'},
                PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority', :enum_class => Hadoop::API::Jobtracker::ThriftJobPriority},
                SCHEDULINGINFO => {:type => ::Thrift::Types::STRING, :name => 'schedulingInfo'}
              }

              def struct_fields; FIELDS; end

              def validate
                unless @runState.nil? || Hadoop::API::Jobtracker::ThriftJobState::VALID_VALUES.include?(@runState)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field runState!')
                end
                unless @priority.nil? || Hadoop::API::Jobtracker::ThriftJobPriority::VALID_VALUES.include?(@priority)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field priority!')
                end
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Job metadata
            class ThriftJobProfile
              include ::Thrift::Struct, ::Thrift::Struct_Union
              USER = 1
              JOBID = 2
              JOBFILE = 3
              NAME = 4
              QUEUENAME = 5

              FIELDS = {
                USER => {:type => ::Thrift::Types::STRING, :name => 'user'},
                JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID},
                JOBFILE => {:type => ::Thrift::Types::STRING, :name => 'jobFile'},
                NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                QUEUENAME => {:type => ::Thrift::Types::STRING, :name => 'queueName'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Container structure of a list of tasks. This list may have been put together
            # according to some selection criteria. That is, it may not correspond to the
            # mapTasks, or reduceTasks, etc. It may even contain tasks of different types.
            class ThriftTaskInProgressList
              include ::Thrift::Struct, ::Thrift::Struct_Union
              TASKS = 1
              NUMTOTALTASKS = 2

              FIELDS = {
                # A (possibly incomplete) list of tasks
                TASKS => {:type => ::Thrift::Types::LIST, :name => 'tasks', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftTaskInProgress}},
                # The total number of tasks in this full list.
                NUMTOTALTASKS => {:type => ::Thrift::Types::I32, :name => 'numTotalTasks'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Status of *all* jobs, not just currently running ones
            class ThriftJobInProgress
              include ::Thrift::Struct, ::Thrift::Struct_Union
              PROFILE = 1
              STATUS = 2
              JOBID = 3
              DESIREDMAPS = 4
              DESIREDREDUCES = 5
              FINISHEDMAPS = 6
              FINISHEDREDUCES = 7
              PRIORITY = 8
              STARTTIME = 11
              FINISHTIME = 12
              LAUNCHTIME = 13
              TASKS = 23

              FIELDS = {
                PROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'profile', :class => Hadoop::API::Jobtracker::ThriftJobProfile},
                STATUS => {:type => ::Thrift::Types::STRUCT, :name => 'status', :class => Hadoop::API::Jobtracker::ThriftJobStatus},
                JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID},
                DESIREDMAPS => {:type => ::Thrift::Types::I32, :name => 'desiredMaps'},
                DESIREDREDUCES => {:type => ::Thrift::Types::I32, :name => 'desiredReduces'},
                FINISHEDMAPS => {:type => ::Thrift::Types::I32, :name => 'finishedMaps'},
                FINISHEDREDUCES => {:type => ::Thrift::Types::I32, :name => 'finishedReduces'},
                PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority', :enum_class => Hadoop::API::Jobtracker::ThriftJobPriority},
                STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
                FINISHTIME => {:type => ::Thrift::Types::I64, :name => 'finishTime'},
                LAUNCHTIME => {:type => ::Thrift::Types::I64, :name => 'launchTime'},
                TASKS => {:type => ::Thrift::Types::STRUCT, :name => 'tasks', :class => Hadoop::API::Jobtracker::ThriftTaskInProgressList}
              }

              def struct_fields; FIELDS; end

              def validate
                unless @priority.nil? || Hadoop::API::Jobtracker::ThriftJobPriority::VALID_VALUES.include?(@priority)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field priority!')
                end
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Container structure of a list of jobs, in case we ever want to add metadata
            class ThriftJobList
              include ::Thrift::Struct, ::Thrift::Struct_Union
              JOBS = 1

              FIELDS = {
                JOBS => {:type => ::Thrift::Types::LIST, :name => 'jobs', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Jobtracker::ThriftJobInProgress}}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Container structure for job counts for a given user
            class ThriftUserJobCounts
              include ::Thrift::Struct, ::Thrift::Struct_Union
              NPREP = 1
              NRUNNING = 2
              NSUCCEEDED = 3
              NFAILED = 4
              NKILLED = 5

              FIELDS = {
                NPREP => {:type => ::Thrift::Types::I32, :name => 'nPrep'},
                NRUNNING => {:type => ::Thrift::Types::I32, :name => 'nRunning'},
                NSUCCEEDED => {:type => ::Thrift::Types::I32, :name => 'nSucceeded'},
                NFAILED => {:type => ::Thrift::Types::I32, :name => 'nFailed'},
                NKILLED => {:type => ::Thrift::Types::I32, :name => 'nKilled'}
              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Status of the cluster as viewed by the jobtracker
            class ThriftClusterStatus
              include ::Thrift::Struct, ::Thrift::Struct_Union
              NUMACTIVETRACKERS = 1
              ACTIVETRACKERNAMES = 2
              BLACKLISTEDTRACKERNAMES = 3
              NUMBLACKLISTEDTRACKERS = 4
              NUMEXCLUDEDNODES = 5
              TASKTRACKEREXPIRYINTERVAL = 6
              MAPTASKS = 7
              REDUCETASKS = 8
              MAXMAPTASKS = 9
              MAXREDUCETASKS = 10
              STATE = 11
              USEDMEMORY = 12
              MAXMEMORY = 13
              TOTALSUBMISSIONS = 14
              HASRESTARTED = 15
              HASRECOVERED = 16
              STARTTIME = 17
              HOSTNAME = 18
              IDENTIFIER = 19
              HTTPPORT = 20

              FIELDS = {
                NUMACTIVETRACKERS => {:type => ::Thrift::Types::I32, :name => 'numActiveTrackers'},
                ACTIVETRACKERNAMES => {:type => ::Thrift::Types::LIST, :name => 'activeTrackerNames', :element => {:type => ::Thrift::Types::STRING}},
                BLACKLISTEDTRACKERNAMES => {:type => ::Thrift::Types::LIST, :name => 'blacklistedTrackerNames', :element => {:type => ::Thrift::Types::STRING}},
                NUMBLACKLISTEDTRACKERS => {:type => ::Thrift::Types::I32, :name => 'numBlacklistedTrackers'},
                NUMEXCLUDEDNODES => {:type => ::Thrift::Types::I32, :name => 'numExcludedNodes'},
                TASKTRACKEREXPIRYINTERVAL => {:type => ::Thrift::Types::I64, :name => 'taskTrackerExpiryInterval'},
                MAPTASKS => {:type => ::Thrift::Types::I32, :name => 'mapTasks'},
                REDUCETASKS => {:type => ::Thrift::Types::I32, :name => 'reduceTasks'},
                MAXMAPTASKS => {:type => ::Thrift::Types::I32, :name => 'maxMapTasks'},
                MAXREDUCETASKS => {:type => ::Thrift::Types::I32, :name => 'maxReduceTasks'},
                STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => Hadoop::API::Jobtracker::JobTrackerState},
                # Used and max memory for the cluster, in bytes
                USEDMEMORY => {:type => ::Thrift::Types::I64, :name => 'usedMemory'},
                MAXMEMORY => {:type => ::Thrift::Types::I64, :name => 'maxMemory'},
                TOTALSUBMISSIONS => {:type => ::Thrift::Types::I32, :name => 'totalSubmissions'},
                HASRESTARTED => {:type => ::Thrift::Types::BOOL, :name => 'hasRestarted'},
                HASRECOVERED => {:type => ::Thrift::Types::BOOL, :name => 'hasRecovered'},
                STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
                HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'},
                IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
                HTTPPORT => {:type => ::Thrift::Types::I32, :name => 'httpPort'}
              }

              def struct_fields; FIELDS; end

              def validate
                unless @state.nil? || Hadoop::API::Jobtracker::JobTrackerState::VALID_VALUES.include?(@state)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
                end
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Merely an indicator that job wasn't found.
            class JobNotFoundException < ::Thrift::Exception
              include ::Thrift::Struct, ::Thrift::Struct_Union

              FIELDS = {

              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Merely an indicator that task wasn't found.
            class TaskNotFoundException < ::Thrift::Exception
              include ::Thrift::Struct, ::Thrift::Struct_Union

              FIELDS = {

              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Indicates that a task attempt wasn't found
            class TaskAttemptNotFoundException < ::Thrift::Exception
              include ::Thrift::Struct, ::Thrift::Struct_Union

              FIELDS = {

              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

            # Indicates that a tasktracker wasn't found
            class TaskTrackerNotFoundException < ::Thrift::Exception
              include ::Thrift::Struct, ::Thrift::Struct_Union

              FIELDS = {

              }

              def struct_fields; FIELDS; end

              def validate
              end

              ::Thrift::Struct.generate_accessors self
            end

          end
        end
      end
