#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'hadoop_service_base'
require 'jobtracker_types'

            module Hadoop
              module API
                module Jobtracker
                  module Jobtracker
                    class Client < Hadoop::API::HadoopServiceBase::Client 
                      include ::Thrift::Client

                      def getJobTrackerName(ctx)
                        send_getJobTrackerName(ctx)
                        return recv_getJobTrackerName()
                      end

                      def send_getJobTrackerName(ctx)
                        send_message('getJobTrackerName', GetJobTrackerName_args, :ctx => ctx)
                      end

                      def recv_getJobTrackerName()
                        result = receive_message(GetJobTrackerName_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJobTrackerName failed: unknown result')
                      end

                      def getClusterStatus(ctx)
                        send_getClusterStatus(ctx)
                        return recv_getClusterStatus()
                      end

                      def send_getClusterStatus(ctx)
                        send_message('getClusterStatus', GetClusterStatus_args, :ctx => ctx)
                      end

                      def recv_getClusterStatus()
                        result = receive_message(GetClusterStatus_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getClusterStatus failed: unknown result')
                      end

                      def getQueues(ctx)
                        send_getQueues(ctx)
                        return recv_getQueues()
                      end

                      def send_getQueues(ctx)
                        send_message('getQueues', GetQueues_args, :ctx => ctx)
                      end

                      def recv_getQueues()
                        result = receive_message(GetQueues_result)
                        return result.success unless result.success.nil?
                        raise result.err unless result.err.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getQueues failed: unknown result')
                      end

                      def getJob(ctx, jobID)
                        send_getJob(ctx, jobID)
                        return recv_getJob()
                      end

                      def send_getJob(ctx, jobID)
                        send_message('getJob', GetJob_args, :ctx => ctx, :jobID => jobID)
                      end

                      def recv_getJob()
                        result = receive_message(GetJob_result)
                        return result.success unless result.success.nil?
                        raise result.err unless result.err.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJob failed: unknown result')
                      end

                      def getRunningJobs(ctx)
                        send_getRunningJobs(ctx)
                        return recv_getRunningJobs()
                      end

                      def send_getRunningJobs(ctx)
                        send_message('getRunningJobs', GetRunningJobs_args, :ctx => ctx)
                      end

                      def recv_getRunningJobs()
                        result = receive_message(GetRunningJobs_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRunningJobs failed: unknown result')
                      end

                      def getCompletedJobs(ctx)
                        send_getCompletedJobs(ctx)
                        return recv_getCompletedJobs()
                      end

                      def send_getCompletedJobs(ctx)
                        send_message('getCompletedJobs', GetCompletedJobs_args, :ctx => ctx)
                      end

                      def recv_getCompletedJobs()
                        result = receive_message(GetCompletedJobs_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCompletedJobs failed: unknown result')
                      end

                      def getFailedJobs(ctx)
                        send_getFailedJobs(ctx)
                        return recv_getFailedJobs()
                      end

                      def send_getFailedJobs(ctx)
                        send_message('getFailedJobs', GetFailedJobs_args, :ctx => ctx)
                      end

                      def recv_getFailedJobs()
                        result = receive_message(GetFailedJobs_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFailedJobs failed: unknown result')
                      end

                      def getKilledJobs(ctx)
                        send_getKilledJobs(ctx)
                        return recv_getKilledJobs()
                      end

                      def send_getKilledJobs(ctx)
                        send_message('getKilledJobs', GetKilledJobs_args, :ctx => ctx)
                      end

                      def recv_getKilledJobs()
                        result = receive_message(GetKilledJobs_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKilledJobs failed: unknown result')
                      end

                      def getAllJobs(ctx)
                        send_getAllJobs(ctx)
                        return recv_getAllJobs()
                      end

                      def send_getAllJobs(ctx)
                        send_message('getAllJobs', GetAllJobs_args, :ctx => ctx)
                      end

                      def recv_getAllJobs()
                        result = receive_message(GetAllJobs_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllJobs failed: unknown result')
                      end

                      def getUserJobCounts(ctx, user)
                        send_getUserJobCounts(ctx, user)
                        return recv_getUserJobCounts()
                      end

                      def send_getUserJobCounts(ctx, user)
                        send_message('getUserJobCounts', GetUserJobCounts_args, :ctx => ctx, :user => user)
                      end

                      def recv_getUserJobCounts()
                        result = receive_message(GetUserJobCounts_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserJobCounts failed: unknown result')
                      end

                      def getTaskList(ctx, jobID, types, states, text, count, offset)
                        send_getTaskList(ctx, jobID, types, states, text, count, offset)
                        return recv_getTaskList()
                      end

                      def send_getTaskList(ctx, jobID, types, states, text, count, offset)
                        send_message('getTaskList', GetTaskList_args, :ctx => ctx, :jobID => jobID, :types => types, :states => states, :text => text, :count => count, :offset => offset)
                      end

                      def recv_getTaskList()
                        result = receive_message(GetTaskList_result)
                        return result.success unless result.success.nil?
                        raise result.err unless result.err.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTaskList failed: unknown result')
                      end

                      def getTask(ctx, taskID)
                        send_getTask(ctx, taskID)
                        return recv_getTask()
                      end

                      def send_getTask(ctx, taskID)
                        send_message('getTask', GetTask_args, :ctx => ctx, :taskID => taskID)
                      end

                      def recv_getTask()
                        result = receive_message(GetTask_result)
                        return result.success unless result.success.nil?
                        raise result.jnf unless result.jnf.nil?
                        raise result.tnf unless result.tnf.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTask failed: unknown result')
                      end

                      def getJobCounters(ctx, jobID)
                        send_getJobCounters(ctx, jobID)
                        return recv_getJobCounters()
                      end

                      def send_getJobCounters(ctx, jobID)
                        send_message('getJobCounters', GetJobCounters_args, :ctx => ctx, :jobID => jobID)
                      end

                      def recv_getJobCounters()
                        result = receive_message(GetJobCounters_result)
                        return result.success unless result.success.nil?
                        raise result.err unless result.err.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJobCounters failed: unknown result')
                      end

                      def getJobCounterRollups(ctx, jobID)
                        send_getJobCounterRollups(ctx, jobID)
                        return recv_getJobCounterRollups()
                      end

                      def send_getJobCounterRollups(ctx, jobID)
                        send_message('getJobCounterRollups', GetJobCounterRollups_args, :ctx => ctx, :jobID => jobID)
                      end

                      def recv_getJobCounterRollups()
                        result = receive_message(GetJobCounterRollups_result)
                        return result.success unless result.success.nil?
                        raise result.err unless result.err.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJobCounterRollups failed: unknown result')
                      end

                      def getActiveTrackers(ctx)
                        send_getActiveTrackers(ctx)
                        return recv_getActiveTrackers()
                      end

                      def send_getActiveTrackers(ctx)
                        send_message('getActiveTrackers', GetActiveTrackers_args, :ctx => ctx)
                      end

                      def recv_getActiveTrackers()
                        result = receive_message(GetActiveTrackers_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getActiveTrackers failed: unknown result')
                      end

                      def getBlacklistedTrackers(ctx)
                        send_getBlacklistedTrackers(ctx)
                        return recv_getBlacklistedTrackers()
                      end

                      def send_getBlacklistedTrackers(ctx)
                        send_message('getBlacklistedTrackers', GetBlacklistedTrackers_args, :ctx => ctx)
                      end

                      def recv_getBlacklistedTrackers()
                        result = receive_message(GetBlacklistedTrackers_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBlacklistedTrackers failed: unknown result')
                      end

                      def getAllTrackers(ctx)
                        send_getAllTrackers(ctx)
                        return recv_getAllTrackers()
                      end

                      def send_getAllTrackers(ctx)
                        send_message('getAllTrackers', GetAllTrackers_args, :ctx => ctx)
                      end

                      def recv_getAllTrackers()
                        result = receive_message(GetAllTrackers_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllTrackers failed: unknown result')
                      end

                      def getTracker(ctx, name)
                        send_getTracker(ctx, name)
                        return recv_getTracker()
                      end

                      def send_getTracker(ctx, name)
                        send_message('getTracker', GetTracker_args, :ctx => ctx, :name => name)
                      end

                      def recv_getTracker()
                        result = receive_message(GetTracker_result)
                        return result.success unless result.success.nil?
                        raise result.tne unless result.tne.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTracker failed: unknown result')
                      end

                      def getCurrentTime(ctx)
                        send_getCurrentTime(ctx)
                        return recv_getCurrentTime()
                      end

                      def send_getCurrentTime(ctx)
                        send_message('getCurrentTime', GetCurrentTime_args, :ctx => ctx)
                      end

                      def recv_getCurrentTime()
                        result = receive_message(GetCurrentTime_result)
                        return result.success unless result.success.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCurrentTime failed: unknown result')
                      end

                      def getJobConfXML(ctx, jobID)
                        send_getJobConfXML(ctx, jobID)
                        return recv_getJobConfXML()
                      end

                      def send_getJobConfXML(ctx, jobID)
                        send_message('getJobConfXML', GetJobConfXML_args, :ctx => ctx, :jobID => jobID)
                      end

                      def recv_getJobConfXML()
                        result = receive_message(GetJobConfXML_result)
                        return result.success unless result.success.nil?
                        raise result.err unless result.err.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJobConfXML failed: unknown result')
                      end

                      def killJob(ctx, jobID)
                        send_killJob(ctx, jobID)
                        recv_killJob()
                      end

                      def send_killJob(ctx, jobID)
                        send_message('killJob', KillJob_args, :ctx => ctx, :jobID => jobID)
                      end

                      def recv_killJob()
                        result = receive_message(KillJob_result)
                        raise result.err unless result.err.nil?
                        raise result.jne unless result.jne.nil?
                        return
                      end

                      def killTaskAttempt(ctx, attemptID)
                        send_killTaskAttempt(ctx, attemptID)
                        recv_killTaskAttempt()
                      end

                      def send_killTaskAttempt(ctx, attemptID)
                        send_message('killTaskAttempt', KillTaskAttempt_args, :ctx => ctx, :attemptID => attemptID)
                      end

                      def recv_killTaskAttempt()
                        result = receive_message(KillTaskAttempt_result)
                        raise result.err unless result.err.nil?
                        raise result.tne unless result.tne.nil?
                        raise result.jne unless result.jne.nil?
                        return
                      end

                      def setJobPriority(ctx, jobID, priority)
                        send_setJobPriority(ctx, jobID, priority)
                        recv_setJobPriority()
                      end

                      def send_setJobPriority(ctx, jobID, priority)
                        send_message('setJobPriority', SetJobPriority_args, :ctx => ctx, :jobID => jobID, :priority => priority)
                      end

                      def recv_setJobPriority()
                        result = receive_message(SetJobPriority_result)
                        raise result.err unless result.err.nil?
                        raise result.jne unless result.jne.nil?
                        return
                      end

                      def getDelegationToken(ctx, renewer)
                        send_getDelegationToken(ctx, renewer)
                        return recv_getDelegationToken()
                      end

                      def send_getDelegationToken(ctx, renewer)
                        send_message('getDelegationToken', GetDelegationToken_args, :ctx => ctx, :renewer => renewer)
                      end

                      def recv_getDelegationToken()
                        result = receive_message(GetDelegationToken_result)
                        return result.success unless result.success.nil?
                        raise result.err unless result.err.nil?
                        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDelegationToken failed: unknown result')
                      end

                    end

                    class Processor < Hadoop::API::HadoopServiceBase::Processor 
                      include ::Thrift::Processor

                      def process_getJobTrackerName(seqid, iprot, oprot)
                        args = read_args(iprot, GetJobTrackerName_args)
                        result = GetJobTrackerName_result.new()
                        result.success = @handler.getJobTrackerName(args.ctx)
                        write_result(result, oprot, 'getJobTrackerName', seqid)
                      end

                      def process_getClusterStatus(seqid, iprot, oprot)
                        args = read_args(iprot, GetClusterStatus_args)
                        result = GetClusterStatus_result.new()
                        result.success = @handler.getClusterStatus(args.ctx)
                        write_result(result, oprot, 'getClusterStatus', seqid)
                      end

                      def process_getQueues(seqid, iprot, oprot)
                        args = read_args(iprot, GetQueues_args)
                        result = GetQueues_result.new()
                        begin
                          result.success = @handler.getQueues(args.ctx)
                        rescue Hadoop::API::IOException => err
                          result.err = err
                        end
                        write_result(result, oprot, 'getQueues', seqid)
                      end

                      def process_getJob(seqid, iprot, oprot)
                        args = read_args(iprot, GetJob_args)
                        result = GetJob_result.new()
                        begin
                          result.success = @handler.getJob(args.ctx, args.jobID)
                        rescue Hadoop::API::Jobtracker::JobNotFoundException => err
                          result.err = err
                        end
                        write_result(result, oprot, 'getJob', seqid)
                      end

                      def process_getRunningJobs(seqid, iprot, oprot)
                        args = read_args(iprot, GetRunningJobs_args)
                        result = GetRunningJobs_result.new()
                        result.success = @handler.getRunningJobs(args.ctx)
                        write_result(result, oprot, 'getRunningJobs', seqid)
                      end

                      def process_getCompletedJobs(seqid, iprot, oprot)
                        args = read_args(iprot, GetCompletedJobs_args)
                        result = GetCompletedJobs_result.new()
                        result.success = @handler.getCompletedJobs(args.ctx)
                        write_result(result, oprot, 'getCompletedJobs', seqid)
                      end

                      def process_getFailedJobs(seqid, iprot, oprot)
                        args = read_args(iprot, GetFailedJobs_args)
                        result = GetFailedJobs_result.new()
                        result.success = @handler.getFailedJobs(args.ctx)
                        write_result(result, oprot, 'getFailedJobs', seqid)
                      end

                      def process_getKilledJobs(seqid, iprot, oprot)
                        args = read_args(iprot, GetKilledJobs_args)
                        result = GetKilledJobs_result.new()
                        result.success = @handler.getKilledJobs(args.ctx)
                        write_result(result, oprot, 'getKilledJobs', seqid)
                      end

                      def process_getAllJobs(seqid, iprot, oprot)
                        args = read_args(iprot, GetAllJobs_args)
                        result = GetAllJobs_result.new()
                        result.success = @handler.getAllJobs(args.ctx)
                        write_result(result, oprot, 'getAllJobs', seqid)
                      end

                      def process_getUserJobCounts(seqid, iprot, oprot)
                        args = read_args(iprot, GetUserJobCounts_args)
                        result = GetUserJobCounts_result.new()
                        result.success = @handler.getUserJobCounts(args.ctx, args.user)
                        write_result(result, oprot, 'getUserJobCounts', seqid)
                      end

                      def process_getTaskList(seqid, iprot, oprot)
                        args = read_args(iprot, GetTaskList_args)
                        result = GetTaskList_result.new()
                        begin
                          result.success = @handler.getTaskList(args.ctx, args.jobID, args.types, args.states, args.text, args.count, args.offset)
                        rescue Hadoop::API::Jobtracker::JobNotFoundException => err
                          result.err = err
                        end
                        write_result(result, oprot, 'getTaskList', seqid)
                      end

                      def process_getTask(seqid, iprot, oprot)
                        args = read_args(iprot, GetTask_args)
                        result = GetTask_result.new()
                        begin
                          result.success = @handler.getTask(args.ctx, args.taskID)
                        rescue Hadoop::API::Jobtracker::JobNotFoundException => jnf
                          result.jnf = jnf
                        rescue Hadoop::API::Jobtracker::TaskNotFoundException => tnf
                          result.tnf = tnf
                        end
                        write_result(result, oprot, 'getTask', seqid)
                      end

                      def process_getJobCounters(seqid, iprot, oprot)
                        args = read_args(iprot, GetJobCounters_args)
                        result = GetJobCounters_result.new()
                        begin
                          result.success = @handler.getJobCounters(args.ctx, args.jobID)
                        rescue Hadoop::API::Jobtracker::JobNotFoundException => err
                          result.err = err
                        end
                        write_result(result, oprot, 'getJobCounters', seqid)
                      end

                      def process_getJobCounterRollups(seqid, iprot, oprot)
                        args = read_args(iprot, GetJobCounterRollups_args)
                        result = GetJobCounterRollups_result.new()
                        begin
                          result.success = @handler.getJobCounterRollups(args.ctx, args.jobID)
                        rescue Hadoop::API::Jobtracker::JobNotFoundException => err
                          result.err = err
                        end
                        write_result(result, oprot, 'getJobCounterRollups', seqid)
                      end

                      def process_getActiveTrackers(seqid, iprot, oprot)
                        args = read_args(iprot, GetActiveTrackers_args)
                        result = GetActiveTrackers_result.new()
                        result.success = @handler.getActiveTrackers(args.ctx)
                        write_result(result, oprot, 'getActiveTrackers', seqid)
                      end

                      def process_getBlacklistedTrackers(seqid, iprot, oprot)
                        args = read_args(iprot, GetBlacklistedTrackers_args)
                        result = GetBlacklistedTrackers_result.new()
                        result.success = @handler.getBlacklistedTrackers(args.ctx)
                        write_result(result, oprot, 'getBlacklistedTrackers', seqid)
                      end

                      def process_getAllTrackers(seqid, iprot, oprot)
                        args = read_args(iprot, GetAllTrackers_args)
                        result = GetAllTrackers_result.new()
                        result.success = @handler.getAllTrackers(args.ctx)
                        write_result(result, oprot, 'getAllTrackers', seqid)
                      end

                      def process_getTracker(seqid, iprot, oprot)
                        args = read_args(iprot, GetTracker_args)
                        result = GetTracker_result.new()
                        begin
                          result.success = @handler.getTracker(args.ctx, args.name)
                        rescue Hadoop::API::Jobtracker::TaskTrackerNotFoundException => tne
                          result.tne = tne
                        end
                        write_result(result, oprot, 'getTracker', seqid)
                      end

                      def process_getCurrentTime(seqid, iprot, oprot)
                        args = read_args(iprot, GetCurrentTime_args)
                        result = GetCurrentTime_result.new()
                        result.success = @handler.getCurrentTime(args.ctx)
                        write_result(result, oprot, 'getCurrentTime', seqid)
                      end

                      def process_getJobConfXML(seqid, iprot, oprot)
                        args = read_args(iprot, GetJobConfXML_args)
                        result = GetJobConfXML_result.new()
                        begin
                          result.success = @handler.getJobConfXML(args.ctx, args.jobID)
                        rescue Hadoop::API::IOException => err
                          result.err = err
                        end
                        write_result(result, oprot, 'getJobConfXML', seqid)
                      end

                      def process_killJob(seqid, iprot, oprot)
                        args = read_args(iprot, KillJob_args)
                        result = KillJob_result.new()
                        begin
                          @handler.killJob(args.ctx, args.jobID)
                        rescue Hadoop::API::IOException => err
                          result.err = err
                        rescue Hadoop::API::Jobtracker::JobNotFoundException => jne
                          result.jne = jne
                        end
                        write_result(result, oprot, 'killJob', seqid)
                      end

                      def process_killTaskAttempt(seqid, iprot, oprot)
                        args = read_args(iprot, KillTaskAttempt_args)
                        result = KillTaskAttempt_result.new()
                        begin
                          @handler.killTaskAttempt(args.ctx, args.attemptID)
                        rescue Hadoop::API::IOException => err
                          result.err = err
                        rescue Hadoop::API::Jobtracker::TaskAttemptNotFoundException => tne
                          result.tne = tne
                        rescue Hadoop::API::Jobtracker::JobNotFoundException => jne
                          result.jne = jne
                        end
                        write_result(result, oprot, 'killTaskAttempt', seqid)
                      end

                      def process_setJobPriority(seqid, iprot, oprot)
                        args = read_args(iprot, SetJobPriority_args)
                        result = SetJobPriority_result.new()
                        begin
                          @handler.setJobPriority(args.ctx, args.jobID, args.priority)
                        rescue Hadoop::API::IOException => err
                          result.err = err
                        rescue Hadoop::API::Jobtracker::JobNotFoundException => jne
                          result.jne = jne
                        end
                        write_result(result, oprot, 'setJobPriority', seqid)
                      end

                      def process_getDelegationToken(seqid, iprot, oprot)
                        args = read_args(iprot, GetDelegationToken_args)
                        result = GetDelegationToken_result.new()
                        begin
                          result.success = @handler.getDelegationToken(args.ctx, args.renewer)
                        rescue Hadoop::API::IOException => err
                          result.err = err
                        end
                        write_result(result, oprot, 'getDelegationToken', seqid)
                      end

                    end

                    # HELPER FUNCTIONS AND STRUCTURES

                    class GetJobTrackerName_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJobTrackerName_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetClusterStatus_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetClusterStatus_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftClusterStatus}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetQueues_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetQueues_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      ERR = 1

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftJobQueueList},
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJob_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      JOBID = 1

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJob_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      ERR = 1

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftJobInProgress},
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::Jobtracker::JobNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetRunningJobs_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetRunningJobs_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftJobList}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetCompletedJobs_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetCompletedJobs_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftJobList}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetFailedJobs_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetFailedJobs_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftJobList}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetKilledJobs_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetKilledJobs_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftJobList}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetAllJobs_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetAllJobs_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftJobList}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetUserJobCounts_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 1
                      USER = 2

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        USER => {:type => ::Thrift::Types::STRING, :name => 'user'}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetUserJobCounts_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftUserJobCounts}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetTaskList_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 1
                      JOBID = 2
                      TYPES = 3
                      STATES = 4
                      TEXT = 5
                      COUNT = 6
                      OFFSET = 7

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID},
                        TYPES => {:type => ::Thrift::Types::SET, :name => 'types', :element => {:type => ::Thrift::Types::I32, :enum_class => Hadoop::API::Jobtracker::ThriftTaskType}},
                        STATES => {:type => ::Thrift::Types::SET, :name => 'states', :element => {:type => ::Thrift::Types::I32, :enum_class => Hadoop::API::Jobtracker::ThriftTaskQueryState}},
                        TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
                        COUNT => {:type => ::Thrift::Types::I32, :name => 'count'},
                        OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetTaskList_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      ERR = 1

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftTaskInProgressList},
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::Jobtracker::JobNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetTask_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 1
                      TASKID = 2

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        TASKID => {:type => ::Thrift::Types::STRUCT, :name => 'taskID', :class => Hadoop::API::Jobtracker::ThriftTaskID}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetTask_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      JNF = 1
                      TNF = 2

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftTaskInProgress},
                        JNF => {:type => ::Thrift::Types::STRUCT, :name => 'jnf', :class => Hadoop::API::Jobtracker::JobNotFoundException},
                        TNF => {:type => ::Thrift::Types::STRUCT, :name => 'tnf', :class => Hadoop::API::Jobtracker::TaskNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJobCounters_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      JOBID = 1

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJobCounters_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      ERR = 1

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftGroupList},
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::Jobtracker::JobNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJobCounterRollups_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      JOBID = 1

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJobCounterRollups_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      ERR = 1

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftJobCounterRollups},
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::Jobtracker::JobNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetActiveTrackers_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetActiveTrackers_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftTaskTrackerStatusList}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetBlacklistedTrackers_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetBlacklistedTrackers_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftTaskTrackerStatusList}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetAllTrackers_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetAllTrackers_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftTaskTrackerStatusList}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetTracker_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      NAME = 1

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetTracker_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      TNE = 1

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Jobtracker::ThriftTaskTrackerStatus},
                        TNE => {:type => ::Thrift::Types::STRUCT, :name => 'tne', :class => Hadoop::API::Jobtracker::TaskTrackerNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetCurrentTime_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetCurrentTime_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJobConfXML_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      JOBID = 1

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetJobConfXML_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      ERR = 1

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class KillJob_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      JOBID = 1

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class KillJob_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      ERR = 1
                      JNE = 2

                      FIELDS = {
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException},
                        JNE => {:type => ::Thrift::Types::STRUCT, :name => 'jne', :class => Hadoop::API::Jobtracker::JobNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class KillTaskAttempt_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      ATTEMPTID = 1

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        ATTEMPTID => {:type => ::Thrift::Types::STRUCT, :name => 'attemptID', :class => Hadoop::API::Jobtracker::ThriftTaskAttemptID}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class KillTaskAttempt_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      ERR = 1
                      TNE = 2
                      JNE = 3

                      FIELDS = {
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException},
                        TNE => {:type => ::Thrift::Types::STRUCT, :name => 'tne', :class => Hadoop::API::Jobtracker::TaskAttemptNotFoundException},
                        JNE => {:type => ::Thrift::Types::STRUCT, :name => 'jne', :class => Hadoop::API::Jobtracker::JobNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class SetJobPriority_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      JOBID = 1
                      PRIORITY = 2

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        JOBID => {:type => ::Thrift::Types::STRUCT, :name => 'jobID', :class => Hadoop::API::Jobtracker::ThriftJobID},
                        PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority', :enum_class => Hadoop::API::Jobtracker::ThriftJobPriority}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                        unless @priority.nil? || Hadoop::API::Jobtracker::ThriftJobPriority::VALID_VALUES.include?(@priority)
                          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field priority!')
                        end
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class SetJobPriority_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      ERR = 1
                      JNE = 2

                      FIELDS = {
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException},
                        JNE => {:type => ::Thrift::Types::STRUCT, :name => 'jne', :class => Hadoop::API::Jobtracker::JobNotFoundException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetDelegationToken_args
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      CTX = 10
                      RENEWER = 1

                      FIELDS = {
                        CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                        RENEWER => {:type => ::Thrift::Types::STRING, :name => 'renewer'}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                    class GetDelegationToken_result
                      include ::Thrift::Struct, ::Thrift::Struct_Union
                      SUCCESS = 0
                      ERR = 1

                      FIELDS = {
                        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::ThriftDelegationToken},
                        ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                      }

                      def struct_fields; FIELDS; end

                      def validate
                      end

                      ::Thrift::Struct.generate_accessors self
                    end

                  end

                end
              end
            end
